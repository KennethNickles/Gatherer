apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'maven'
apply plugin: 'signing'

apply from: file('../gradle/checkstyle.gradle')

android {
    compileSdkVersion android_compile_sdk_version.toInteger()
    buildToolsVersion android_build_tools_version

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        minSdkVersion android_minimum_sdk_version.toInteger()
        targetSdkVersion android_target_sdk_version.toInteger()
        versionCode version_code.toInteger()
        versionName version_name
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    sourceSets {
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
    lintOptions {
        disable 'InvalidPackage'
    }
}

repositories {
    maven { url 'https://repo.commonsware.com.s3.amazonaws.com' }
    mavenCentral()
}

dependencies {
    compile "com.android.support:support-annotations:$android_support_version"
    compile "com.android.support:support-v4:$android_support_version"
    compile "com.google.code.gson:gson:$gson_version"
    compile "com.squareup.okhttp:okhttp-urlconnection:$okhttp_urlconnection_version"
    compile "com.squareup.okhttp:okhttp:$okhttp_version"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttp_logging_version"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.workday:postman:$postman_version"
    compile "com.workday:postman-processor:$postman_version"
    compile "io.reactivex:rxandroid:$rx_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testCompile "junit:junit:$junit_version"
    testCompile "org.mockito:mockito-core:$mockito_version"
}

def isReleaseBuild() {
    return version_name.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = group_id
                pom.artifactId = artifact_id
                pom.version = version_name

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(),
                            password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(),
                            password: getRepositoryPassword())
                }

                pom.project {
                    name pom_name
                    packaging pom_packaging
                    description pom_description
                    url pom_url

                    scm {
                        url pom_scm_url
                        connection pom_scm_connection
                        developerConnection pom_scm_dev_connection
                    }

                    licenses {
                        license {
                            name pom_license_name
                            url pom_license_url
                            distribution pom_license_dist
                        }
                    }

                    developers {
                        developer {
                            id pom_developer_id
                            name pom_developer_name
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
    }
}
